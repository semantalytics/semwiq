/*****************************************************************************
 * Source code information
 * -----------------------
 * Original author    Andreas Langegger, Johannes Kepler University Linz, Austria
 * Author email       al@jku.at
 * Package            @package@
 * Web site           @website@
 * Created            26 Aug 2009 11:49
 * @copyright@
 *****************************************************************************/

// Package
///////////////////////////////////////
package at.jku.semwiq.mediator.vocabulary;

// Imports
///////////////////////////////////////
import com.hp.hpl.jena.rdf.model.*;


/**
 * Vocabulary definitions from file:vocabulary/purl.org/semwiq/mediator/sdv.n3
 * @author Auto-generated by schemagen on 26 Aug 2009 11:49
 */
public class SDV {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://purl.org/semwiq/mediator/sdv#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    



    /* Vocabulary properties */

    /** <p>allows to explicitly specify that a data source is disabled</p> */
    public static final Property disabled = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#disabled" );
    
    /** <p>interval for update request in seconds</p> */
    public static final Property interval = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#interval" );
    
    /** <p>allows to mark resources with a timestamp to indicate when they were downloaded 
     *  from the Web into the global store (e.g. used for RDFStatsDataset)</p>
     */
    public static final Property lastDownload = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#lastDownload" );
    
    /** <p>specific data source monitor options, if omitted the data source is monitored 
     *  by the default :VoidMonitoringProfile</p>
     */
    public static final Property monitoringProfile = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#monitoringProfile" );
    
    /** <p>indicates that a property or instance of some class is required for a catalog 
     *  to be valid</p>
     */
    public static final Property required = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#required" );
    
    /** <p>overrides global RDFStats configuration (ignoring explicit properties rsc:endpoint, 
     *  rsc:statsModel, rsc:outputFile, and rsc:outputFormat)</p>
     */
    public static final Property statsConfig = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#statsConfig" );
    
    /** <p>Optional custom URL from where to retrieve RDFStats statistics. The default 
     *  is '%%PROTOCOL%%://%%DOMAIN%%:%%PORT%%/rdfstats-%%PORT%%.nt.zip'. The following 
     *  macros can be used and will be replaced by the corresponding values of a concrete 
     *  data source's SPARQL endpoint URI. %%ENDPOINT-URI%%, %%PROTOCOL%%, %%DOMAIN%%, 
     *  %%PORT%%, %%PATH%%.</p>
     */
    public static final Property statsUrl = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#statsUrl" );
    
    /** <p>specifies that the data source is capable of subsumption reasoning itself, 
     *  default is false</p>
     */
    public static final Property subsumption = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#subsumption" );
    
    /** <p>this property is used internally by SemWIQ to mark data sources as temporarily 
     *  unavailable, it will be added/changed by the data source monitor</p>
     */
    public static final Property unavailable = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#unavailable" );
    
    /** <p></p> */
    public static final Property updateOnStartup = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#updateOnStartup" );
    
    /** <p>update dataset only if remote statistics are newer</p> */
    public static final Property updateOnlyIfNewer = m_model.createProperty( "http://purl.org/semwiq/mediator/sdv#updateOnlyIfNewer" );
    

    /* Vocabulary classes */

    /** <p>defines centralized monitoring and specifies monitoring options</p> */
    public static final Resource CentralizedMonitoringProfile = m_model.createResource( "http://purl.org/semwiq/mediator/sdv#CentralizedMonitoringProfile" );
    
    /** <p>data source accessible via the SPARQL protocol - Instead of introducing a 
     *  new data source vocabulary, we assume that each void:Dataset that has a void:sparqlEndpoint 
     *  property is a valid data source</p>
     */
    public static final Resource DataSource = m_model.createResource( "http://purl.org/semwiq/mediator/sdv#DataSource" );
    
    /** <p>abstract class - specifies monitoring options and can be applied for multiple 
     *  data sources</p>
     */
    public static final Resource MonitoringProfile = m_model.createResource( "http://purl.org/semwiq/mediator/sdv#MonitoringProfile" );
    
    /** <p>defines remote monitoring (RDFStats installed at end-point) and specifies 
     *  monitoring options</p>
     */
    public static final Resource RemoteMonitoringProfile = m_model.createResource( "http://purl.org/semwiq/mediator/sdv#RemoteMonitoringProfile" );
    
    /** <p>monitors data sources by retrieving voiD metadata according to robots.txt. 
     *  =&gt; sitemap.xml =&gt; void:Dataset in RDF</p>
     */
    public static final Resource VoidMonitoringProfile = m_model.createResource( "http://purl.org/semwiq/mediator/sdv#VoidMonitoringProfile" );
    

    /* Vocabulary individuals */

}

/*
@footer@
*/

